plugins {
  id 'java-library'
  id 'idea'
  id 'maven-publish'
  id 'net.neoforged.gradle.userdev' version '7.0.145'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

version = mod_version
group = mod_group_id

base {
  archivesName = "engineersdecor-${minecraft_version}-neoforge"
}

repositories {
  mavenCentral()
  maven {
    url = "https://maven.blamejared.com"
  }
}

runs {
  configureEach {
    systemProperty 'forge.logging.markers', 'REGISTRIES'
    systemProperty 'forge.logging.console.level', 'debug'
    modSource project.sourceSets.main
  }
  server {
    programArgument '--nogui'
  }
}

configurations {
  runtimeClasspath.extendsFrom localRuntime
}

dependencies {
  implementation "net.neoforged:neoforge:${neo_version}"

  compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
  compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
  localRuntime "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"
}

tasks.withType(ProcessResources).configureEach {
  var replaceProperties = [
          minecraft_version      : minecraft_version,
          minecraft_version_range: minecraft_version_range,
          neo_version            : neo_version,
          neo_version_range      : neo_version_range,
          loader_version_range   : loader_version_range,
          mod_id                 : mod_id,
          mod_name               : mod_name,
          mod_license            : mod_license,
          mod_version            : mod_version,
          mod_authors            : mod_authors,
          mod_description        : mod_description
  ]
  inputs.properties replaceProperties

  filesMatching(['META-INF/neoforge.mods.toml']) {
    expand replaceProperties
  }
}

idea {
  module {
    downloadSources = true
    downloadJavadoc = true
  }
}

//jar.finalizedBy('reobfJar')

// Signing
//import net.minecraftforge.gradle.common.tasks.SignJar
//project.afterEvaluate {
//  task signJar(type: SignJar, dependsOn: jar) {
//    onlyIf { project.hasProperty("keystore_file") }
//    if(project.hasProperty("keystore_file")) {
//      keyStore = project.getProperty("keystore_file")
//      alias = project.getProperty("keystore_alias")
//      storePass = project.getProperty("keystore_pass")
//      keyPass = project.getProperty("keystore_keypass")
//      inputFile = jar.archiveFile
//      outputFile = jar.archiveFile
//    } else {
//      logger.warn("[WARNING] Signing skipped.")
//    }
//  }
//  reobfJar.finalizedBy('signJar')
//}

//tasks.withType(JavaCompile).configureEach {
//  options.encoding = 'UTF-8'
//}
